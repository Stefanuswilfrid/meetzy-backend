// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  EO
}

enum NotificationType {
  TICKET_SOLD
  NEW_EO
  NEW_EVENT
}

enum NotificationReceiver {
  EO
  ADMIN
}

enum Status {
  PENDING
  VERIFIED
  REJECTED
}

enum Category {
  MUSIC
  ART
  SPORTS
  CULINARY
  TECH
  LIFESTYLE
  BUSINESS
  EDUCATION
  ENTERTAINMENT
  CHARITY
  OTHER
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  email                 String?        @unique
  fullname              String
  age                   Int?
  password              String
  status                Status
  role                  Role
  createdAt             DateTime       @default(now())
  Event                 Event[]
  Ticket                Ticket[]
  notification_receiver Notification[] @relation("notification_receiver")
  notification_sender   Notification[] @relation("notification_sender")
}

model Ticket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  title             String
  description       String?
  imageUrl          String
  startDatetime     DateTime
  endDatetime       DateTime
  locationDetail    String?
  ticketPrice       Int
  capacity          Int
  remainingCapacity Int
  category          Category
  city              String
  status            Status
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
  Ticket            Ticket[]
}

model Notification {
  id                         String               @id @default(auto()) @map("_id") @db.ObjectId
  message                    String
  type                       NotificationType
  fromId                     String               @db.ObjectId
  toId                       String               @db.ObjectId
  receiver                   NotificationReceiver
  createdAt                  DateTime             @default(now())
  user_notification_receiver User                 @relation("notification_receiver", fields: [toId], references: [id])
  user_notification_sender   User                 @relation("notification_sender", fields: [fromId], references: [id])
}
